// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegigtrations semesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  offerdCourses     offeredCourse[]

  @@map("academic_department")
}

model Student {
  id                                 String                               @id @default(uuid())
  studentId                          String
  firstName                          String
  lastName                           String
  middleName                         String
  profileImage                       String
  email                              String
  contactNo                          String
  gender                             String
  bloodGroup                         String
  designation                        String
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  academicSemesterId                 String
  academicSemester                   AcademicSemester                     @relation(fields: [academicSemesterId], references: [id])
  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                   @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId                  String
  academicFaculty                    AcademicFaculty                      @relation(fields: [academicFacultyId], references: [id])
  studnetSemesterRegistration        studnetSemesterRegistration[]
  studentSemesterRegistrationCourese studentSemesterRegistrationCourese[]

  @@map("students")
}

model Faculty {
  id                         String                       @id @default(uuid())
  facultyId                  String
  firstName                  String
  lastName                   String
  middleName                 String
  profileImage               String
  email                      String
  contactNo                  String
  gender                     String
  bloodGroup                 String
  designation                String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  academicDepartmentId       String
  academicDepartment         AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId          String
  academicFaculty            AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  courses                    CourseFaculty[]
  offeredCourseClassSchedule offeredCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                         String                       @id @default(uuid())
  roomNumber                 String
  floor                      String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  buildingId                 String
  building                   Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedule offeredCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("courseToPreRequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("preRequisiteToCourese")
  faculties       CourseFaculty[]
  offerdCourses   offeredCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation(fields: [courseId], references: [id], name: "courseToPreRequisite")
  preRequisite   Course @relation(fields: [preRequisiteId], references: [id], name: "preRequisiteToCourese")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])
  facultyId String

  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model semesterRegistration {
  id                String                     @id @default(uuid())
  startDate         DateTime
  endDate           DateTime
  status            semesterRegistrationStatus @default(UPCOMING)
  minCredit         Int                        @default(0)
  maxCredit         Int                        @default(0)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  acadmicSemesterId String

  academicSemester                   AcademicSemester                     @relation(fields: [acadmicSemesterId], references: [id])
  offerdCourses                      offeredCourse[]
  offeredCoursesSections             offeredCoursesSection[]
  offeredCourseClassSchedule         offeredCourseClassSchedule[]
  studnetSemesterRegistration        studnetSemesterRegistration[]
  studentSemesterRegistrationCourese studentSemesterRegistrationCourese[]
}

model offeredCourse {
  id        String   @id @default(uuid())
  cretedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId                           String
  Courses                            Course                               @relation(fields: [courseId], references: [id])
  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                   @relation(fields: [academicDepartmentId], references: [id])
  semesterRegestrationId             String
  semesterRegestration               semesterRegistration                 @relation(fields: [semesterRegestrationId], references: [id])
  offerdCoursesSections              offeredCoursesSection[]
  studentSemesterRegistrationCourese studentSemesterRegistrationCourese[]

  @@map("offered_course")
}

model offeredCoursesSection {
  id               String @id @default(uuid())
  title            String
  maxCapacity      Int
  currnetEnrolment Int    @default(0)

  offeredCourseId String
  offeredCourse   offeredCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegestrationId             String
  semesterRegestration               semesterRegistration                 @relation(fields: [semesterRegestrationId], references: [id])
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  offeredCourseClassSchedule         offeredCourseClassSchedule[]
  studentSemesterRegistrationCourese studentSemesterRegistrationCourese[]

  @@map("offered_course_section")
}

model offeredCourseClassSchedule {
  id String @id @default(uuid())

  dayOfWeek String @default("saturday")

  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseSectionId String
  offeredCourseSection   offeredCoursesSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   semesterRegistration  @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                  @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty               @relation(fields: [facultyId], references: [id])

  @@map("offeredcourseclasschedule")
}

model studnetSemesterRegistration {
  id               String   @id @default(uuid())
  isConfirmed      Boolean? @default(false)
  totalCreditTaken Int?     @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   semesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registration")
}

model studentSemesterRegistrationCourese {
  semesterRegistrationId String
  semesterRegistration   semesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  offeredCourseId String
  offeredCoures   offeredCourse @relation(fields: [offeredCourseId], references: [id])

  offeredCourseSectionId String
  offeredCourseSection   offeredCoursesSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

enum semesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
